syntax = "proto3";

package p2p;

import "wifs.proto";

service PeerToPeer {
    rpc Ping(HeartBeat) returns (HeartBeat) {}
    rpc PingMaster(ServerInit) returns (HeartBeat) {}
    rpc p2p_GET(wifs.GetReq) returns (wifs.GetRes){}
    rpc p2p_PUT(wifs.PutReq) returns (wifs.PutRes){}
    rpc AllotServerId(HeartBeat) returns (ServerInit){}
    rpc BroadcastServerId(ServerInit) returns (HeartBeat){}
    rpc InitializeNewServer(ServerInit) returns (HeartBeat){}
    rpc CompactMemTable(HeartBeat) returns (StatusRes){}
    rpc MergeDB(ServerInit) returns (StatusRes){}
    rpc SplitDB(SplitReq) returns (StatusRes){}
}

message HeartBeat {
    enum State {
        // can be used when doing the catch up work after failure
        INIT = 0;

        // when in normal operation
        READY = 1;
    }
    State state = 1;
}

message StatusRes {
    enum Status{
        FAIL = 0;
        PASS = 1;
  }
    Status status = 1;
}

message SplitReq {
    int32 range_end = 1;
    int32 id = 2;
}

message ServerInit {
    enum Action{
        INSERT = 0;
        DELETE = 1;
    }
    Action action = 1;
    int32 id = 2;
    map<int64, wifs.ServerDetails> servermap = 3;
    string ipaddr = 4;
}